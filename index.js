const TelegramAPI = require('node-telegram-bot-api')
const {add:add, findById,deleteById, updateById}=require('./Database/RepoDays')
const { addedButton, startKeyboard, createDayKeyboard,delKeyboard, timeKeyboard, scheduleKeyboard, backToCreate, backToMenu, empty} = require('./Helpers/InlineKeyboards');
const token = "6993703742:AAGZLadrxQNeCqF_ZURg5O9Cl-CcClgTv6k"
const {safeEditMessageText,addText,showLessons, findTomorrow} = require('./Helpers/Functions');
const cron = require("node-cron");

const {addTime,deleteTime,findTime,updateTime, findByIdTime}=require('./Database/RepoTime')
const {addUser,findByIdUser} = require("./Database/RepoUser");

const bot = new TelegramAPI(token,{polling: true})

const daysName = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
const times=['18:00','21:00','00:00']
const delDaysQuery=['–ü–Ω-del', '–í—Ç-del', '–°—Ä-del', '–ß—Ç-del', '–ü—Ç-del', '–°–±-del']

const userStatus = {}
const userDayToAdd={}

bot.setMyCommands([
    {command:'/today',description:"–°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"},
    {command:'/tomorrow',description:"–ó–∞–≤—Ç—Ä–∞—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"},
    {command:'/start',description:"–°—Ç–∞—Ä—Ç"},
    {command:'/help',description:"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"}
])

bot.on("message", async message => {
    let text = message.text;
    let chatId = message.chat.id;
    let userId=message.from.id;
    if (text === '/start') {
        userStatus[userId] = {
            status: "start",
            lastActive: Date.now(),
        };
        userDayToAdd[userId]=-1
        if (await findByIdUser(userId)) {
            await addUser(userId, message.from.first_name, message.from.username)
        }
        return bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç ${message.from.first_name} üëã`, startKeyboard)
    }

    else if (text==="/today") {
        let day = new Date().getDay();
        let count = 1;

        if (day === 0) {
            return bot.sendMessage(chatId, "<b>–°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ</b> –æ—Ç–¥—ã—Ö–∞–π!üî•</b>")
        } else {
            let lessons = await findById(chatId,day-1)
            let allLessons = `<b>–°–µ–≥–æ–¥–Ω—è:</b>\n`;
            if (lessons.length>0) {
                for (const lesson of lessons) {
                    allLessons += `   <b>‚Ä¢</b> ${lesson}\n`;
                }
            }else {
                allLessons = "<b>–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ\n</b>";
            }
            return bot.sendMessage(chatId,allLessons,{
                parse_mode:"HTML",
                reply_markup: {
                    inline_keyboard:[
                        [{text:"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",callback_data:"Start"}]
                    ]
                }
            })
        }
    }

    else if (text==="/tomorrow") {
        await findTomorrow(bot,userId)
    }

    else if (text === '/help' && userStatus[userId]!=='add') {
        return bot.sendMessage(chatId, '/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n\n–ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø–∏—à–∏—Ç–µ : @gazizhasik')
    }
    else if (text==='/message'){
        return bot.sendMessage(chatId,JSON.stringify(message,null,4))
    }
})


bot.on("callback_query", async query => {
    try {
        let text;
        let chatId = query.message.chat.id;
        let userId=query.from.id;
        let messageId = query.message.message_id;

        userStatus[userId]="start"

        if (query.data === "Show" || query.data==="backToShow") {
            const lessons=await showLessons(bot,userId);
            await safeEditMessageText(bot,`${lessons}`, chatId,messageId,{
                inline_keyboard: [
                    [{text: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å‚úèÔ∏è", callback_data: "Edit"}],
                    [{text: "–ù–∞–∑–∞–¥", callback_data: "backToSchedule"}]
                ]
            });
        }
        else if (query.data==="Edit"){
            const lessons=await showLessons(bot,userId);
            await safeEditMessageText(bot,`${lessons}`, chatId,messageId,{
                inline_keyboard: [
                    [{text: "–£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å", callback_data: "Delete"},{text: "–£–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data: "Drop"}],
                    [{text: "–ù–∞–∑–∞–¥", callback_data: "backToShow"}]
                ]
            });
        }

        else if (query.data === "Delete") {
            const lessons=await showLessons(bot,userId);
            await safeEditMessageText(bot,`–ö–∞–∫–æ–π –¥–µ–Ω—å —É–¥–∞–ª–∏—Ç—å:\n${lessons}`, chatId,messageId,delKeyboard.reply_markup);
        }

        else if (delDaysQuery.includes(query.data)){
            await deleteById(chatId,delDaysQuery.indexOf(query.data));

            await safeEditMessageText(bot,await showLessons(bot,chatId),chatId,messageId, backToCreate.reply_markup)
        }

        else if (query.data === "Drop") {
            for (let i = 0; i < 6; i++) {
                await deleteById(userId, i);
            }
            await safeEditMessageText(bot,"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ‚úÖ",chatId,messageId, backToCreate.reply_markup)
        }

        else if (query.data === "backToMenu") {
            await safeEditMessageText(bot,`–ü—Ä–∏–≤–µ—Ç ${query.from.first_name} üëã`, chatId,messageId,startKeyboard.reply_markup)
        }

        else if (query.data === "Create" || query.data === "backToCreate") {
            text = "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –∏ –∑–∞–ø–æ–ª–Ω–∏ :";
            await safeEditMessageText(bot,text, chatId, messageId, (await createDayKeyboard(userId)).reply_markup)
        }


        else if (daysName.includes(query.data)) {
            userDayToAdd[userId] = daysName.indexOf(query.data)
            await addText(bot,chatId, messageId,userStatus);
        }

        else if (query.data === "Settings"){
            text="–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"
            const checkUserTime = await findByIdTime(userId);
            if (checkUserTime)
                text=`\n<b>‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è :</b> ${checkUserTime}\n\n<i>–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—èüòâ</i>`
            await safeEditMessageText(bot,text,chatId,messageId,timeKeyboard.reply_markup)
        }

        else if (query.data==="Schedule" || query.data==="backToSchedule"){
            text="üî∏ –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üî∏"
            await safeEditMessageText(bot,text,chatId,messageId,scheduleKeyboard.reply_markup);
        }

        else if (query.data==="otherTime"){
            userStatus[userId]="time"
            text="–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n<i>–í–æ—Ç —Ç–∞–∫: <u>21:00</u></i>"
            await safeEditMessageText(bot,text,chatId,messageId,backToMenu.reply_markup);
        }

        else if (times.includes(query.data)){
            const checkTime = await findByIdTime(userId);
            if (checkTime){
                await updateTime(userId,query.data);
            }else {
                await addTime(userId, query.data);
            }
            await safeEditMessageText(bot,`–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ‚úÖ\n<b>–í—Ä–µ–º—è: ${query.data}</b>`, chatId,messageId,backToMenu.reply_markup)
        }

        else if(query.data==="updateDay"){
            userStatus[userId]="updateDay"
            let tasks=await findById(userId,userDayToAdd[userId]);
            let count=1;
            text="<b>–¢–µ–∫—É—â–∏–µ –∑–∞–Ω—è—Ç–∏—è:</b>\n"
            for (const task of tasks) {
                text+=`${count}.${task}\n`
                count++
            }
            text+="\n<b>–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∑–∞–Ω—è—Ç–∏—è —Å –∑–∞–ø—è—Ç–æ–π:</b>"
            await safeEditMessageText(bot,text,chatId,messageId,backToCreate.reply_markup);
        }
        else if (query.data==="Start"){
            userStatus[userId]="start"
            userDayToAdd[userId]=-1
            return safeEditMessageText(bot,`–ü—Ä–∏–≤–µ—Ç ${query.from.first_name} üëã`,chatId,messageId,startKeyboard.reply_markup)
        }
    }catch (error){
        console.log(error);
    }
})

bot.on('message', async message => {
    const chatId = message.chat.id;
    const messageId=message.message_id;
    let userId=message.from.id;

    if (userStatus[userId]==="time" && message.text.includes(":")){
        const timeArray=message.text.split(":");
        if (isNaN(Number(timeArray[0]))===false || isNaN(Number(timeArray[1]))===false) {
            const hours = parseInt(timeArray[0]);
            const minutes = parseInt(timeArray[1]);

            if (hours < 24 && minutes < 60 && hours >= 0 && minutes >= 0) {
                const checkTime = await findByIdTime(userId);
                const formattedTime = String(hours).padStart(2, '0') + ':' + String(minutes).padStart(2, '0');

                if (checkTime) {
                    await updateTime(userId, formattedTime);
                } else {
                    await addTime(userId, formattedTime);
                }
                await bot.sendMessage(chatId, `–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ‚úÖ\n<b>‚è∞–í—Ä–µ–º—è: ${formattedTime}</b>`, {
                    parse_mode:"HTML",
                    reply_markup: backToMenu.reply_markup
                })
                userStatus[userId]="start";
                setTimeout(() => {
                    bot.deleteMessage(userId, messageId)
                }, 2000)
            } else {
                await bot.sendMessage(chatId, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è!\n–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:", backToMenu);
            }
        }
    }

    if (userStatus[userId] === "add" || userStatus[userId] === "updateDay") {
        const lessons = message.text.split(",").map(item => item.trim());
        const colors = ["üü©", "üü•", "üüß", "üü®", "üü¶", "üü™", "üü´", "‚¨õ", "‚¨ú"];
        const usedColors = {};
        let text = "";

        for (const element of lessons) {
            if (!usedColors[element]) {
                const availableColors = colors.filter(color => !Object.values(usedColors).includes(color));
                if (availableColors.length > 0) {
                    usedColors[element] = availableColors[0];
                } else {
                    usedColors[element] = "‚ùì";
                }
            }

            text += `${usedColors[element]} ${element}\n`;
        }

        userStatus[userId] = "start";
        const checkDay = await findById(userId, userDayToAdd[userId]);
        if (checkDay.length === 0) {
            try {
                await add(userId, lessons, userDayToAdd[userId]);
            } catch (error) {
                return bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫ –ë–î");
            }
        } else {
            try {
                await updateById(userId, userDayToAdd[userId], lessons);
            } catch (error) {
                return bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î");
            }
        }

        text += "\n<b>–í—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ üòâ</b>";
        return bot.sendMessage(chatId, text, {
            parse_mode: "HTML",
            reply_markup: addedButton.reply_markup
        });
    }
})



cron.schedule('* * * * *',async () => {
    let minutes=String(new Date().getMinutes()).padStart(2,'0');
    let hours=String(new Date().getHours()).padStart(2,'0');

    let currTime=`${hours}:${minutes}`;

    let users=await findTime(currTime)
    users.forEach(user => {
        let chatId = Number(user._id)
        findTomorrow(bot,chatId)
    })
})

setInterval(() => {
    const now = Date.now();
    for (const chatId in userStatus) {
        if (now - userStatus[chatId].lastActive > 10 * 60 * 1000) {
            delete userStatus[chatId];
            delete userDayToAdd[chatId];
            console.log(`–£–¥–∞–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
        }
    }
}, 5 * 60 * 1000)
