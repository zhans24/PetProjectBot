const TelegramAPI = require('node-telegram-bot-api')
const {add:add, findById,deleteById, updateById}=require('./Database/RepoDays')
const { addedButton, startKeyboard, createDayKeyboard, timeKeyboard, scheduleKeyboard, backToCreate, backToMenu} = require('./Helpers/InlineKeyboards');const token = "6993703742:AAGZLadrxQNeCqF_ZURg5O9Cl-CcClgTv6k"
const {safeEditMessageText,addText,show, setTime} = require('./Helpers/Functions');
const cron = require('node-cron');

const bot = new TelegramAPI(token,{polling: true})

const daysName = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
const times=['18:00','21:00','00:00']

const userStatus={}
const userDayToAdd={}

bot.setMyCommands([
    {command:'/start',description:"Start bot"},
    {command:'/help',description:"Info"}
])

let time='21:00';



bot.on("message", async message => {
    let text = message.text;
    let chatId = message.chat.id;

    if (text === '/start') {
        userStatus[chatId]="start"
        userDayToAdd[chatId]=-1
        return bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç ${message.chat.first_name} üëã`, startKeyboard)
    }

    else if (text === '/help') {
        return bot.sendMessage(chatId, '/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n\n–ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø–∏—à–∏—Ç–µ : @gazizhasik')
    }
})



bot.on("callback_query", async query => {
    try {
        let text;
        let chatId = query.message.chat.id;
        let messageId = query.message.message_id;

        if (query.data === "Show") {
            await show(bot,chatId, messageId)
        }

        if (query.data === "Drop") {
            for (let i = 0; i < 6; i++) {
                await deleteById(chatId, i);
            }
            await safeEditMessageText(bot,"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",chatId,messageId, backToCreate.reply_markup)
        }

        if (query.data === "backToMenu") {
            await safeEditMessageText(bot,`–ü—Ä–∏–≤–µ—Ç ${query.message.chat.first_name} üëã`, chatId,messageId,startKeyboard.reply_markup)
        }

        if (query.data === "Create" || query.data === "backToCreate") {
            text = "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –∏ –∑–∞–ø–æ–ª–Ω–∏ :";
            await safeEditMessageText(bot,text, chatId, messageId, (await createDayKeyboard(chatId)).reply_markup)
        }


        if (daysName.includes(query.data)) {
            userDayToAdd[chatId] = daysName.indexOf(query.data)
            await addText(bot,chatId, messageId,userStatus);
        }

        if (query.data === "Settings"){
            text="–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"
            await safeEditMessageText(bot,text,chatId,messageId,timeKeyboard.reply_markup)
        }

        if (query.data==="Schedule" || query.data==="backToSchedule"){
            text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
            await safeEditMessageText(bot,text,chatId,messageId,scheduleKeyboard.reply_markup);
        }

        if (query.data==="otherTime"){
            await bot.answerCallbackQuery(query.id, {
                text: "–ï—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ,–ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!",
                show_alert: true
            })
        }

        if (times.includes(query.data)){
            time=query.data
            await setTime(bot, chatId, time)
            await safeEditMessageText(bot,"–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ‚úÖ", chatId,messageId,backToMenu.reply_markup)

        }
    }catch (error){
        console.log(error);
    }
})


bot.on('message', async message => {
    const chatId = message.chat.id;
    let lessons=message.text.split(" ");

    let text=""
    let count=1;
    for (let element of lessons) {
        text+=`${count}.${element}\n`;
        count++;
    }

    if (userStatus[chatId]==="add") {
        userStatus[chatId] = "start";

        const checkDay=await findById(chatId, userDayToAdd[chatId]);
        if (checkDay.length === 0 ) {
            try {
                await add(chatId, lessons, userDayToAdd[chatId])
            }catch (error){
                return bot.sendMessage(chatId,"–û—à–∏–±–∫–∞ –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫ –ë–î")
            }
        }
        else {
            try {
                await updateById(chatId,userDayToAdd[chatId],lessons);
            }catch (error){
                return bot.sendMessage(chatId,"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î")
            }

        }
        userDayToAdd[chatId]=-1
        text+="\n<b>–í—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ üòâ</b>"
        return bot.sendMessage(chatId,text , {
            parse_mode:"HTML",
            reply_markup:addedButton.reply_markup
        });
    }
})
